[{"title":"js30关第十二关","date":"2017-02-21T12:06:36.000Z","path":"2017/02/21/js30关第十二关/","text":"监听键盘时间 1234window.addEventListener(&apos;keyup&apos;, (e) =&gt; &#123; console.log(e.key);&#125;); includes:检查一个数组是否包括某字符pressed.join(&#39;&#39;).includes(secretCode)splice:向增加或删除元素 pressed.splice(-secretCode.length - 1, pressed.length - secretCode.length);","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第十六关","date":"2017-02-21T12:05:33.000Z","path":"2017/02/21/js30关第十六关/","text":"contenteditable=true是html5的全局属性规定是否允许用户编辑内容。 使用mousemove获取鼠标当前坐标， 12345function shadow(e) &#123; let &#123; offsetX: x, offsetY: y &#125; = e; &#125; hero.addEventListener(&apos;mousemove&apos;, shadow);","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第十五关","date":"2017-02-21T12:04:45.000Z","path":"2017/02/21/js30关第十五关/","text":"JSON.parse12345678910111213JSON.parse(&apos;&#123;&quot;1&quot;: 1, &quot;2&quot;: 2,&quot;3&quot;: &#123;&quot;4&quot;: 4, &quot;5&quot;: &#123;&quot;6&quot;: 6&#125;&#125;&#125;&apos;, function (k, v) &#123; console.log(k); // 输出当前的属性名，从而得知遍历顺序是从内向外的， // 最后一个属性名会是个空字符串。 return v; // 返回原始属性值，相当于没有传递 reviver 参数。&#125;);// 1// 2// 4// 6// 5// 3// &quot;&quot; localStorage.clear();用以清楚localStorage缓存的数据","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第二十四关","date":"2017-02-21T12:02:45.000Z","path":"2017/02/21/js30关第二十四关/","text":"每次滚动都会触发fixNav事件123456789function fixNav() &#123; if(window.scrollY &gt;= topOfNav) &#123; ... &#125; else &#123; ... &#125; &#125; window.addEventListener(&apos;scroll&apos;, fixNav);","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第十一关","date":"2017-02-14T11:31:18.000Z","path":"2017/02/14/js30关第十一关/","text":"video 点击播放暂停12345function togglePlay() &#123; const method = video.paused ? &apos;play&apos; : &apos;pause&apos;; video[method]();&#125;video.addEventListener(&apos;click&apos;, togglePlay); 更新进度条12345function handleProgress() &#123; const percent = (video.currentTime / video.duration) * 100; progressBar.style.flexBasis = `$&#123;percent&#125;%`;&#125;video.addEventListener(&apos;timeupdate&apos;, handleProgress); 调整音量以及倍速，使用 this.name获取对象，12345function handleRangeUpdate() &#123; video[this.name] = this.value;&#125;ranges.forEach(range =&gt; range.addEventListener(&apos;change&apos;, handleRangeUpdate));ranges.forEach(range =&gt; range.addEventListener(&apos;mousemove&apos;, handleRangeUpdate)); 设置点击进度条12345function scrub(e) &#123; const scrubTime = (e.offsetX / progress.offsetWidth) * video.duration; video.currentTime = scrubTime;&#125;progress.addEventListener(&apos;mousemove&apos;, (e) =&gt; mousedown &amp;&amp; scrub(e)); 设置自定义属性data-skip=&quot;-10&quot;，使用this.dataset.skip获取数12345function skip() &#123; video.currentTime += parseFloat(this.dataset.skip);&#125;skipButtons.forEach(button =&gt; button.addEventListener(&apos;click&apos;, skip));","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第七关","date":"2017-01-02T09:43:40.000Z","path":"2017/01/02/js30关第七关/","text":"findIndex返回满足回调函数中指定的测试条件的第一个数组元素的索引值。 Array.prototype.find()如果数组中某个元素满足测试条件，find() 方法就会返回那个元素的第一个值，如果没有满足条件的元素，则返回 undefined。 every()&amp;&amp;some() every()与some()方法都是JS中数组的迭代方法。every()是对数组中的每一项运行给定函数，如果该函数对每一项返回true,则返回true。some()是对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第六关","date":"2017-01-02T09:14:45.000Z","path":"2017/01/02/js30关第六关/","text":"fetch 123fetch(endpoint) .then(blob =&gt; blob.json()) .then(data =&gt; cities.push(...data)); 获取urlendpoint，josn数据，并将数据存入cities中。...的用法 12345678910111213&gt;b[]&gt; a[ 1, 2, 3, 4 ]&gt; b.push(a)1&gt; b[ [ 1, 2, 3, 4 ] ]&gt; b.push(...a)5&gt; b[ [ 1, 2, 3, 4 ], 1, 2, 3, 4 ] 使team4和pyalers指向不同的原型链，避免更改原数组。1const team4 = [...players]; 正则每三个数字加一个逗号x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, &#39;,&#39;) 匹配this.value与place.city,给匹配到的字符加上span123const regex = new RegExp(this.value, &apos;gi&apos;);const cityName = place.city.replace(regex, `&lt;span class=&quot;hl&quot;&gt;$&#123;this.value&#125;&lt;/span&gt;`);","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第五关","date":"2016-12-29T10:58:45.000Z","path":"2016/12/29/js30关第五关/","text":"translateY：正数向下 flex布局 toggle ( String [, force] )当只有一个参数时：切换 class value; 即如果类存在，则删除它并返回false，如果不存在，则添加它并返回true。","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第四关","date":"2016-12-27T15:31:15.000Z","path":"2016/12/27/js30关第四关/","text":"consoleConsole.assert()判断第一个参数是否为真，false的话抛出异常并且在console输出相应信息。Console.count()以参数为标识记录调用的次数，调用时在console打印标识以及调用次数。Console.debug()console.log方法的别称，使用方法可以参考Console.log()Console.dir()打印一条以三角形符号开头的语句，可以点击三角展开查看对象的属性。Console.error()打印一条错误信息。Console._exception()error方法的别称，使用方法参考Console.error()Console.group()打印树状结构，配合groupCollapsed以及groupEnd方法;Console.groupCollapsed()使用方法和group相同，不同的是groupCollapsed打印出来的内容默认是折叠的。Console.groupEnd()结束当前TreeConsole.info()打印以感叹号字符开始的信息，使用方法和log相同Console.log()打印字符串，使用方法比较类似C的printf格式输出。Console.profile()可以以第一个参数为标识，开始javascript执行过程的数据收集。和chrome控制台选项开Profiles比较类似Console.profileEnd()配合profile方法，作为数据收集的结束。Console.table()将数据打印成表格。Console.time()计时器，接受一个参数作为标识。Console.timeEnd()接受一个参数作为标识，结束特定的计时器。Console.trace()打印stack trace.Console.warn()打印一个警告信息。","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第三关","date":"2016-12-26T05:01:34.000Z","path":"2016/12/26/js30关第三关/","text":"css Variables 123456// 声明一个变量： :root &#123; --base: #ffc600; --spacing: 10px; --blur: 10px; &#125; 这里我们借助了上篇文章 结构性伪类 中的 :root{ } 伪类，在全局 :root{ } 伪类中定义CSS 变量。123456//使用变量img &#123; padding: var(--spacing); background: var(--base); filter: blur(var(--blur)); &#125; 伪类:root 伪类匹配文档树的根元素。应用到HTML，:root 即表示为元素，除了优先级更高外，相当于html标签选择器。:empty 伪类，代表没有子元素的元素。 这里说的子元素，只计算元素结点及文本（包括空格），注释、运行指令不考虑在内。:not 伪类：CSS否定伪类，:not(X)，可以选择除某个元素之外的所有元素。:target代表一个特殊的元素，若是谈论区别的话，它需要一个id去匹配文档URI的片段标识符。 提示：伪类名称对大小写不敏感。 其他label，for 属性规定 label 与哪个表单元素绑定。 dataset：自定义data-属性，后接小写变量名 ||运算符可以用来填充默认值const suffix = this.dataset.sizing || &#39;&#39;;当this.dataset.sizing为undefined时suffix = ‘’","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第二关","date":"2016-12-25T12:05:04.000Z","path":"2016/12/25/js30关第二关/","text":"css好难：cubic-bezier()、transform-origin、transition","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第一关","date":"2016-12-22T18:38:32.000Z","path":"2016/12/23/js30关第一关/","text":"知识点总结：transform：transform:scale(1.1)缩放1.1倍vh:min-height:100vh;最小高度为100%audio.aspx):用法， 1&lt;audio src=&quot;&quot;&gt;&lt;/audio&gt; 1audio.play(); transitionend：事件会在 CSS transition 结束后触发 参考链接","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"初识electron","date":"2016-12-21T07:54:05.000Z","path":"2016/12/21/初识electron/","text":"electron写的图片编辑器，代码开源置GitHub 使用的库编辑器参考：https://github.com/lalwanivikas/image-editor ui使用的是：photon 保存dom节点：dom-to-image 图片抓取：https://github.com/rharder/imagesnap 期间遇到的坑： 查看图片的路径问题：打包后路径不匹配，放弃nodejs的fs使用electron自带的path进行路径处理。 html5的文件操作：要使用createObjectURL创建一个虚拟url传递给img.scr，才能显示图片。另外不要释放url，否则将无法对此img标签进行后续操作。 保存图片：尝试了许多方法，主要的思路有三个 canvas：应该是最主流的方法，倒是遇到了很多问题，例如文件放不到canvas中、下载后无css样式等，准备接下来刷js30天闯关的时候在系统学习canvas 网页截屏：phantomjs不能等待本地的css，js加载，pageres好像可以，下次再用 将dom结点直接转化成图片：然后我找到了dom-to-image—— dom-to-img是一个用js写的可以将任意dom结点转化成svg或png、jpeg等图片格式的库。实现原理如下： 复制dom结点 计算每个结点的style，与其子结点 嵌入网页字体 嵌入图像 将复制到的结点转化为xml 将xml放入 标签，转到svg，再转到url 获取数据保存到Uint8Array，创建一个img传递给离屏的canvas，最后读取。 使用imagesnap和chrome的webkitGetUserMedia配合进行图像捕捉只需将imagesnap放入img文件夹下，运行 1cd ./img &amp;&amp; ./imagesnap 即可保存图像到img文件夹下 总结electron可以使用html+css+js的一套前端开发模式开发桌面应用，用起来相当顺手，而且有强大的nodejs作为保障，可以完成大部分桌面应用功能。","tags":[]},{"title":"Hello Hexo","date":"2016-11-22T07:19:59.000Z","path":"2016/11/22/Hello-Hexo/","text":"","tags":[]},{"title":"Hello World","date":"2016-11-22T06:26:22.000Z","path":"2016/11/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]