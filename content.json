[{"title":"js30关第三关","date":"2016-12-26T05:01:34.000Z","path":"2016/12/26/js30关第三关/","text":"#css Variables 123456// 声明一个变量： :root &#123; --base: #ffc600; --spacing: 10px; --blur: 10px; &#125; 这里我们借助了上篇文章 结构性伪类 中的 :root{ } 伪类，在全局 :root{ } 伪类中定义CSS 变量。123456//使用变量img &#123; padding: var(--spacing); background: var(--base); filter: blur(var(--blur)); &#125; #伪类:root 伪类匹配文档树的根元素。应用到HTML，:root 即表示为元素，除了优先级更高外，相当于html标签选择器。:empty 伪类，代表没有子元素的元素。 这里说的子元素，只计算元素结点及文本（包括空格），注释、运行指令不考虑在内。:not 伪类：CSS否定伪类，:not(X)，可以选择除某个元素之外的所有元素。:target代表一个特殊的元素，若是谈论区别的话，它需要一个id去匹配文档URI的片段标识符。 提示：伪类名称对大小写不敏感。 #其他label，for 属性规定 label 与哪个表单元素绑定。 dataset：自定义data-属性，后接小写变量名 ||运算符可以用来填充默认值const suffix = this.dataset.sizing || &#39;&#39;;当this.dataset.sizing为undefined时suffix = ‘’","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第二关","date":"2016-12-25T12:05:04.000Z","path":"2016/12/25/js30关第二关/","text":"css好难：cubic-bezier()、transform-origin、transition","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"js30关第一关","date":"2016-12-22T18:38:32.000Z","path":"2016/12/23/js30关第一关/","text":"知识点总结：transform：transform:scale(1.1)缩放1.1倍vh:min-height:100vh;最小高度为100%audio.aspx):用法， 1&lt;audio src=&quot;&quot;&gt;&lt;/audio&gt; 1audio.play(); transitionend：事件会在 CSS transition 结束后触发 参考链接","tags":[{"name":"js闯关","slug":"js闯关","permalink":"http://yoursite.com/tags/js闯关/"}]},{"title":"初识electron","date":"2016-12-21T07:54:05.000Z","path":"2016/12/21/初识electron/","text":"electron写的图片编辑器，代码开源置GitHub #使用的库编辑器参考：https://github.com/lalwanivikas/image-editor ui使用的是：photon 保存dom节点：dom-to-image 图片抓取：https://github.com/rharder/imagesnap #期间遇到的坑： 查看图片的路径问题：打包后路径不匹配，放弃nodejs的fs使用electron自带的path进行路径处理。 html5的文件操作：要使用createObjectURL创建一个虚拟url传递给img.scr，才能显示图片。另外不要释放url，否则将无法对此img标签进行后续操作。 保存图片：尝试了许多方法，主要的思路有三个 canvas：应该是最主流的方法，倒是遇到了很多问题，例如文件放不到canvas中、下载后无css样式等，准备接下来刷js30天闯关的时候在系统学习canvas 网页截屏：phantomjs不能等待本地的css，js加载，pageres好像可以，下次再用 将dom结点直接转化成图片：然后我找到了dom-to-image—— dom-to-img是一个用js写的可以将任意dom结点转化成svg或png、jpeg等图片格式的库。实现原理如下： 复制dom结点 计算每个结点的style，与其子结点 嵌入网页字体 嵌入图像 将复制到的结点转化为xml 将xml放入 标签，转到svg，再转到url 获取数据保存到Uint8Array，创建一个img传递给离屏的canvas，最后读取。 使用imagesnap和chrome的webkitGetUserMedia配合进行图像捕捉只需将imagesnap放入img文件夹下，运行 1cd ./img &amp;&amp; ./imagesnap 即可保存图像到img文件夹下 #总结electron可以使用html+css+js的一套前端开发模式开发桌面应用，用起来相当顺手，而且有强大的nodejs作为保障，可以完成大部分桌面应用功能。","tags":[]},{"title":"Hello Hexo","date":"2016-11-22T07:19:59.000Z","path":"2016/11/22/Hello-Hexo/","text":"","tags":[]},{"title":"Hello World","date":"2016-11-22T06:26:22.000Z","path":"2016/11/22/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]